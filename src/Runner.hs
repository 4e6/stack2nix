module Runner ( run ) where

import Control.Lens
import Data.Functor
import Distribution.Nixpkgs.Haskell.FromStack
import Distribution.Nixpkgs.Haskell.FromStack.Package
import Distribution.Nixpkgs.Haskell.Stack
import Distribution.Nixpkgs.Haskell.Stack.PrettyPrinting as PP
import Distribution.Version (Version(..))
import System.FilePath as Path
import Options.Applicative
import Runner.Cli
import Stack.Config
import Stackage.Types
import System.IO (withFile, IOMode(..), hPutStrLn)
import Text.PrettyPrint.HughesPJClass (render)

import qualified Data.Map as Map
import qualified Stackage2nix as S2n


run :: IO ()
run = do
  opts <- execParser pinfo
  stackYaml <- envStackYaml >>= \case
    Just p  -> putStrLn "Getting project config file from STACK_YAML environment" $> p
    Nothing -> pure $ opts ^. optStackYaml
  stackConf <- either fail pure =<< readStackConfig stackYaml
  let
    s2nOpts = mkS2nOptions stackConf opts
  (buildPlan, packageSetConfig) <- S2n.run s2nOpts
  -- generate haskell packages override
  let
    pkgConfig = mkPackageConfig (opts ^. optPlatform) (opts ^. optCompilerId)
    overrideConfig = mkOverrideConfig opts (siGhcVersion $ bpSystemInfo buildPlan)
  packages <- traverse (packageDerivation pkgConfig (opts ^. optHackageDb))
    $ stackConf ^. scPackages
  let
    out = PP.overrideHaskellPackages overrideConfig packages
  writeFile (opts ^. optOutDerivation) (show out)
  -- generate stackage packages
  nodes <- traverse (fmap overrideStackageNode . uncurry (buildNodeM packageSetConfig))
    $ Map.toList (bpPackages buildPlan)
  -- let nodes = reachableDependencies (mkNode <$> packages) allNodes
  withFile (opts ^. optOutStackagePackages) WriteMode $ \h -> do
    hPutStrLn h ("# Generated by stack2nix from " ++ S2n.optBuildPlanFile s2nOpts)
    hPutStrLn h $ render $ pPrintOutPackages (view nodeDerivation <$> nodes)
  withFile (opts ^. optOutStackageConfig) WriteMode $ \h -> do
    hPutStrLn h ("# Generated by stack2nix from " ++ S2n.optBuildPlanFile s2nOpts)
    hPutStrLn h $ render $ pPrintOutConfig (bpSystemInfo buildPlan) nodes
  putStrLn $ "Derivation was written to " ++ opts ^. optOutDerivation

mkOverrideConfig :: Options -> Version -> OverrideConfig
mkOverrideConfig opts ghcVersion = OverrideConfig
  { _ocGhc              = ghcVersion
  , _ocStackagePackages = opts ^. optOutStackagePackages
  , _ocStackageConfig   = opts ^. optOutStackageConfig }

mkS2nOptions :: StackConfig -> Options -> S2n.Options
mkS2nOptions conf opts = S2n.Options
  { S2n.optBuildPlanFile     =
    (opts ^. optLtsHaskellRepo) Path.</>
    (conf ^. scResolver . to unStackResolver) Path.<.>
    ".yaml"
  , S2n.optAllCabalHashes    = opts ^. optAllCabalHashesRepo
  , S2n.optNixpkgsRepository = opts ^. optNixpkgsRepository
  , S2n.optNixpkgsMap        = Nothing
  , S2n.optOutPackages       = opts ^. optOutStackagePackages
  , S2n.optOutConfig         = opts ^. optOutStackageConfig }
