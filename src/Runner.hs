module Runner ( run ) where

import Control.Lens
import Distribution.Nixpkgs.Haskell.FromStack
import Distribution.Nixpkgs.Haskell.FromStack.Package
import Distribution.Nixpkgs.Haskell.Stack
import Distribution.Nixpkgs.Haskell.Stack.PrettyPrinting as PP
import Distribution.Version (Version(..))
import Options.Applicative
import Runner.Cli
import Stack.Config
import Stackage.Types
import System.IO (withFile, IOMode(..), hPutStrLn)
import Text.PrettyPrint.HughesPJClass (render)

import qualified Data.Map as Map
import qualified Stackage2nix as S2n


run :: IO ()
run = do
  opts <- execParser pinfo
  stackYaml <- either fail pure =<< readStackConfig (opts ^. optStackYaml)
  (buildPlan, packageSetConfig) <- S2n.run $ mkS2nOptions opts
  -- generate haskell packages override
  let
    pkgConfig = mkPackageConfig (opts ^. optPlatform) (opts ^. optCompilerId)
    overrideConfig = mkOverrideConfig opts (siGhcVersion $ bpSystemInfo buildPlan)
  packages <- traverse (packageDerivation pkgConfig (opts ^. optHackageDb))
    $ stackYaml ^. scPackages
  let
    out = PP.overrideHaskellPackages overrideConfig packages
  writeFile (opts ^. optOutFile) (show out)
  -- generate stackage packages
  allNodes <- traverse (uncurry $ buildNodeM packageSetConfig)
    $ Map.toList (bpPackages buildPlan)
  let nodes = reachableDependencies (mkNode <$> packages) allNodes
  withFile (opts ^. optStackageOutPackages) WriteMode $ \h -> do
    hPutStrLn h ("# Generated by stack2nix from " ++ opts ^. optStackageBuildPlan)
    hPutStrLn h $ render $ pPrintOutPackages (nodeDerivation <$> nodes)
  withFile (opts ^. optStackageOutConfig) WriteMode $ \h -> do
    hPutStrLn h ("# Generated by stack2nix from " ++ opts ^. optStackageBuildPlan)
    hPutStrLn h $ render $ pPrintOutConfig (bpSystemInfo buildPlan) nodes
  putStrLn $ "Derivation was written to " ++ opts ^. optOutFile

mkOverrideConfig :: Options -> Version -> OverrideConfig
mkOverrideConfig opts ghcVersion = OverrideConfig
  { _ocGhc              = ghcVersion
  , _ocStackagePackages = opts ^. optStackageOutPackages
  , _ocStackageConfig   = opts ^. optStackageOutConfig }

mkS2nOptions :: Options -> S2n.Options
mkS2nOptions opts = S2n.Options
  { S2n.optBuildPlanFile     = opts ^. optStackageBuildPlan
  , S2n.optAllCabalHashes    = opts ^. optAllCabalHashes
  , S2n.optNixpkgsRepository = opts ^. optNixpkgsRepository
  , S2n.optNixpkgsMap        = Nothing
  , S2n.optOutPackages       = opts ^. optStackageOutPackages
  , S2n.optOutConfig         = opts ^. optStackageOutConfig }
