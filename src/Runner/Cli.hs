{-# LANGUAGE TemplateHaskell #-}

module Runner.Cli where

import           Control.Lens
import           Data.Monoid ( (<>) )
import           Data.Text as T
import qualified Distribution.Compat.ReadP as P
import           Distribution.Compiler as Compiler
import           Distribution.Nixpkgs.Haskell.Stack
import           Distribution.System as System
import qualified Distribution.Text as Text
import           Options.Applicative as Opts
import           Stack.Config
import           Stack.Types


newtype StackagePackages = StackagePackages { unStackagePackages :: FilePath }
  deriving (Show)

makePrisms ''StackagePackages

newtype StackageConfig = StackageConfig { unStackageConfig :: FilePath }
  deriving (Show)

makePrisms ''StackageConfig

data Options = Options
  { _optHackageDb        :: !(Maybe HackageDb)
  , _optStackagePackages :: !(Maybe StackagePackages)
  , _optStackageConfig   :: !(Maybe StackageConfig)
  , _optCompilerId       :: !CompilerId
  , _optPlatform         :: !Platform
  , _optStackYaml        :: !FilePath
  } deriving (Show)

makeLenses ''Options

options :: Parser Options
options = Options
  <$> optional hackageDb
  <*> optional stackagePackages
  <*> optional stackageConfig
  <*> compilerId
  <*> platform
  <*> stackYamlArg

pinfo :: ParserInfo Options
pinfo = info
  (   helper
  <*> options )
  (  fullDesc
  <> header "stack2nix converts Stack files into build instructions for Nix." )

stackResolver :: Parser StackResolver
stackResolver = StackResolver <$>
  option text
    ( long "resolver"
      <> metavar "RESOLVER"
      <> help "override stack resolver" )

stackagePackages :: Parser StackagePackages
stackagePackages = StackagePackages <$>
  option str
    ( long "nix-stackage-packages"
      <> metavar "STACKAGE_PACKAGES"
      <> help "path to packages file generated by 'stackage2nix'" )

stackageConfig :: Parser StackageConfig
stackageConfig = StackageConfig <$>
  option str
    ( long "nix-stackage-config"
      <> metavar "STACKAGE_CONFIG"
      <> help "path to packages config file generated by 'stackage2nix'" )

stackYamlArg :: Parser FilePath
stackYamlArg = Opts.argument str
  ( metavar "STACK_YAML"
    <> value "stack.yaml" )

hackageDb :: Parser HackageDb
hackageDb = HackageDb <$>
  option text
    ( long "hackage-db"
      <> metavar "HACKAGE_DB"
      <> help "path to the local hackage db in tar format" )

cabalFlag :: Parser CabalFlag
cabalFlag = CabalFlag <$>
  option text
    ( short 'f'
      <> long "flag"
      <> help "Cabal flag (may be specified multiple times)" )

compilerId :: Parser CompilerId
compilerId = option (readP Text.parse)
  ( long "compiler"
    <> help "compiler to use when evaluating the Cabal file"
    <> value buildCompilerId
    <> showDefaultWith Text.display )

platform :: Parser Platform
platform = option (readP Text.parse)
  ( long "system"
    <> help "target system to use when evaluating the Cabal file"
    <> value buildPlatform
    <> showDefaultWith Text.display )

text :: ReadM Text
text = T.pack <$> str

readP :: P.ReadP a a -> ReadM a
readP p = eitherReader $ \s ->
  case [ r' | (r',"") <- P.readP_to_S p s ] of
    (r:_) -> Right r
    _     -> Left ("invalid value " ++ show s)
